from decimal import Decimal
import pytest
from app import create_app
from app.db.database import db
from app.models.accounts import Account
from app.services.AccountService import AccountService


@pytest.fixture
def app():
    app = create_app('config.TestingConfig')
    
    db.init_app(app)
    with app.app_context():
        db.create_all()
    yield app
    with app.app_context():
        db.drop_all()

@pytest.fixture
def account_service(app):
    with app.app_context():  # This ensures operations within account_service are within an app context
        return AccountService()

def test_create_account_auto_generates_account_number(app, account_service):
    # The use of account_service should inherit the context from the app fixture
    # Setup: Ensure no account exists initially
    with app.app_context():  # Explicitly ensure app context is active for this operation
        assert Account.query.count() == 0

    # Execute: Create a new account within an app context
    
        new_account = account_service.create_account("savings", 100.0, "active", 1)

    # Verify: Account is created with an autogenerated account number, within an app context
        assert new_account.account_number is not None
        assert isinstance(new_account.account_number, Decimal)  # or str, based on your implementation
        assert Account.query.count() == 1